/*üì± QUEST√ÉO 1 (0.5 ponto) 
Considere o dom√≠nio de celulares. Existem as empresas fabricantes de celulares, por 
exemplo: Apple e Samsung. E cada fabricante √© capaz de construir diferentes modelos de 
celulares, por exemplo: Galaxy8, Galaxy 20, IPhoneX e IPhoneS. 
Construa um programa Java, capaz de reproduzir o cen√°rio acima. Seu programa deve: 
‚óè conter uma classe Main, que demonstrar√° o funcionamento üöÄ
‚óè conter uma interface FabricanteCelular, com o m√©todo: 
‚óã public Celular constroiCelular( String modelo ); 
‚óè conter uma interface Celular, com os m√©todos: 
‚óã  public void fazLigacao(); 
‚óã public void tiraFoto(); 
‚óè utilizar o padr√£o de projeto F√°brica para constru√ß√£o de celulares; üè≠
‚óè utilizar o padr√£o de projeto Singleton para cria√ß√£o de fabricantes. üõ†Ô∏è
*/

// Interface que define o comportamento de um celular
interface Celular {
    public void fazLigacao(); // üìû M√©todo para fazer liga√ß√µes
    public void tiraFoto(); // üì∏ M√©todo para tirar fotos
}

// Interface que define o comportamento de um fabricante de celulares
interface FabricanteCelular {
    public Celular constroiCelular(String modelo); // üè≠ M√©todo para construir um celular
}

// Classe que representa um celular da Apple (iPhone)
class IPhone implements Celular {
    private final String modelo; // Modelo do iPhone

    // Construtor que recebe o modelo do iPhone
    public IPhone(String modelo){
        this.modelo = modelo;
    }

    // Implementa√ß√£o do m√©todo para fazer liga√ß√µes
    @Override
    public void fazLigacao() {
        System.out.println("üìû Fazendo liga√ß√£o com " + modelo + " da Apple üçè");
    }

    // Implementa√ß√£o do m√©todo para tirar fotos
    @Override
    public void tiraFoto() {
        System.out.println("üì∏ Tirando foto com " + modelo + " da Apple üçè");
    }
}

// Classe que representa um celular da Samsung (Galaxy)
class Galaxy implements Celular {
    private final String modelo; // Modelo do Galaxy

    // Construtor que recebe o modelo do Galaxy
    public Galaxy (String modelo){
        this.modelo = modelo;
    }

    // Implementa√ß√£o do m√©todo para fazer liga√ß√µes
    @Override
    public void fazLigacao() {
        System.out.println("üìû Fazendo liga√ß√£o com " + modelo + " da Samsung üì±");
    }

    // Implementa√ß√£o do m√©todo para tirar fotos
    @Override
    public void tiraFoto() {
        System.out.println("üì∏ Tirando foto com " + modelo + " da Samsung üì±");
    }
}

// Classe que representa a fabricante Apple (usa o padr√£o Singleton)
class Apple implements FabricanteCelular {
    private static Apple instance; // Inst√¢ncia √∫nica da Apple

    // Construtor privado para evitar cria√ß√£o de inst√¢ncias fora da classe
    private Apple() {
        System.out.println("üçè Criando fabricante Apple...");
    }

    // M√©todo est√°tico para obter a inst√¢ncia √∫nica da Apple (Singleton)
    public static Apple getInstace() {
        if (instance == null){
            instance = new Apple();
        }
        return instance;
    }

    // Implementa√ß√£o do m√©todo para construir um iPhone
    @Override
    public Celular constroiCelular(String modelo)
    {
        System.out.println("üçè Apple fabricando iPhone modelo: " + modelo);
        return new IPhone(modelo);
    }
}

// Classe que representa a fabricante Samsung (usa o padr√£o Singleton)
class Samsung implements FabricanteCelular {
    private static Samsung instance; // Inst√¢ncia √∫nica da Samsung

    // Construtor privado para evitar cria√ß√£o de inst√¢ncias fora da classe
    private Samsung() {
        System.out.println("üì± Criando fabricante Samsung...");
    }
    
    // M√©todo est√°tico para obter a inst√¢ncia √∫nica da Samsung (Singleton)
    public static Samsung getInstance() {
        if (instance == null) {
            instance = new Samsung();
        }
        return instance;
    }
    
    // Implementa√ß√£o do m√©todo para construir um Galaxy
    @Override
    public Celular constroiCelular(String modelo) {
        System.out.println("üì± Samsung fabricando Galaxy modelo: " + modelo);
        return new Galaxy(modelo);
    }
}

// Classe principal que demonstra o funcionamento do programa
public class CelularMain {
    public static void main(String[] args){
        // Obtendo as inst√¢ncias √∫nicas das fabricantes (Singleton)
        FabricanteCelular apple = Apple.getInstace();
        FabricanteCelular samsung = Samsung.getInstance();

        // Construindo diferentes modelos de celulares
        Celular iphone = apple.constroiCelular("iPhone 12");
        Celular iphone2 = apple.constroiCelular("iPhone 11");
        Celular galaxy = samsung.constroiCelular("Galaxy S21");
        Celular galaxy2 = samsung.constroiCelular("Galaxy S20");

        System.out.println("\nüì± Testando funcionalidades dos celulares:");

        // Testando as funcionalidades dos iPhones
        iphone.fazLigacao();
        iphone.tiraFoto();

        iphone2.fazLigacao();
        iphone2.tiraFoto();

        // Testando as funcionalidades dos Galaxies
        galaxy.fazLigacao();
        galaxy.tiraFoto();

        galaxy2.fazLigacao();
        galaxy2.tiraFoto();

        System.out.println("\nüõ†Ô∏è Testando o padr√£o Singleton para fabricantes:");
        // Obtendo novamente as inst√¢ncias das fabricantes
        FabricanteCelular apple2 = Apple.getInstace();
        FabricanteCelular samsung2 = Samsung.getInstance();

        // Verificando se as inst√¢ncias s√£o as mesmas (Singleton)
        System.out.println("üçè Apple e Apple2 s√£o a mesma inst√¢ncia? " + (apple == apple2));
        System.out.println("üì± Samsung e Samsung2 s√£o a mesma inst√¢ncia? " + (samsung == samsung2));
    }
}